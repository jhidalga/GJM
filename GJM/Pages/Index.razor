@page "/"
@using GJM.Data;
@using GJM.Pages.Posts;
@using GJM.Services;
@using Markdig;
@using Microsoft.EntityFrameworkCore;
@using Helpers;
@using System.Text.RegularExpressions;
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

<PageTitle>Home</PageTitle>

<h1>Dados y Mepples!</h1>

<AuthorizeView Roles="admin">
    <Authorized>
        <Button Color="Color.Primary" Clicked="@(()=>ShowModalNewPost())">Crea una nueva entrada</Button>
        <Divider />
    </Authorized>
</AuthorizeView>

@if(posts.Any() && markdownPipeline != null)
{
    <Pagination>
        <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
        @{
            for (var i = 1; i <= totalPages; i++)
            {
                var pageNumberAsString = i.ToString();
                <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <PaginationLink Page="@pageNumberAsString" Clicked="@(async (string page) => await SetActive(page))">
                        @pageNumberAsString
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>
    <CardDeck>
        <Row>
            @foreach (var post in posts)
            {
                <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                    <Card>
                        @{
                            string url = GetHeaderUrl(post);
                        }
                        <CardImage Source="@url" Alt="@post.Tittle"></CardImage>
                        <CardBody>
                            <CardTitle Size="5">@post.Tittle</CardTitle>
                            <CardText>
                                @((MarkupString)Markdig.Markdown.ToHtml(ProcessPostContent(post.Content), markdownPipeline))
                            </CardText>
                            <div class="d-flex align-items-center justify-content-start">
                                <Button Color="Color.Primary" Clicked="@(()=> ShowDetail(post))" class="flex-fill mr-2">Abrir</Button>
                                <AuthorizeView Roles="admin">
                                    <Authorized>
                                        <Button Color="Color.Secondary" Clicked="@(()=> ShowModalNewPost(post.Id))" class="flex-fill mr-2">Editar</Button>
                                        <Button Color="Color.Danger" Clicked="@(()=> ShowConfirmDelete(post))" class="flex-fill">Borrar</Button>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
    </CardDeck>

    <Pagination>
        <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
        @{
            for (var i = 1; i <= totalPages; i++)
            {
                var pageNumberAsString = i.ToString();
                <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <PaginationLink Page="@pageNumberAsString" Clicked="@(async (string page) => await SetActive(page))">
                        @pageNumberAsString
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>
}
else
{
  <p>Cargando...</p>   
}

@implements IDisposable

@code {
    IList<Post> posts = new List<Post>();
    MarkdownPipeline? markdownPipeline;

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "1";
    private int totalPages = 0;
    private int itemsPerPage = 6;
    private int idPostDelete = 0;

    [Inject] public IModalService ModalService { get; set; }
    [Inject] public EventService EventService { get; set; }

    private Task ShowModalNewPost(int idPost = 0)
    {
        string modalTitle = idPost > 0 ? "Edit Post" : "New Post";
        return ModalService.Show<ModalForm>(parameters =>
        {
            parameters.Add(x => x.ModalTitle, modalTitle);
            parameters.Add(x => x.IdPost, idPost);

        },
        new ModalInstanceOptions() { UseModalStructure = false, Size = ModalSize.Fullscreen });   

    }

    private Task ShowModal(string title, string message)
    {
        return ModalService.Show<GenericModal>(parameters =>
        {
            parameters.Add(x => x.ModalTitle, title);
            parameters.Add(x => x.ModalBody, message);
        },
        new ModalInstanceOptions() { UseModalStructure = false });
    }

    private Task ShowDetail(Post detailPost)
    {
        return ModalService.Show<DetailModal>(parameters =>
        {
            parameters.Add(x => x.ModalTitle, detailPost.Tittle);
            parameters.Add(x => x.ModalBody, detailPost.Content);
        },
        new ModalInstanceOptions() { UseModalStructure = false, Size = ModalSize.Fullscreen });
    }

    private Task ShowConfirmDelete(Post detailPost)
    {
        idPostDelete = detailPost.Id;
        return ModalService.Show<ModalDeleteConfirm>(parameters =>
        {
        },
        new ModalInstanceOptions() { UseModalStructure = false, Size = ModalSize.Small });
    }

    private string GetHeaderUrl(Post post)
    {
        return string.IsNullOrWhiteSpace(post.HeadImage) ? "https://blazorise.com/img/gallery/2.jpg" : post.HeadImage;
    }

    private string ProcessPostContent(string content)
    {
        const int maxContentLength = 250;
        var contentToProcess = content;

        // Truncate if content is too long
        if (contentToProcess.Length > maxContentLength)
        {
            contentToProcess = contentToProcess.Substring(0, maxContentLength) + "...";
        }

        // Regular expression to find Markdown image syntax ![alt text](url)
        var regex = new Regex(@"!\[.*?\]\((.*?)\)");

        // Replace the image syntax with the URL of the image
        contentToProcess = regex.Replace(contentToProcess, "$1");

        return contentToProcess;
    }

    private bool IsActive(string page) => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(totalPages.ToString());
        }
        return false;
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < totalPages)
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
    }

    private async Task SetActive(string page)
    {
        var pageAsInt = int.Parse(page);
        if (pageAsInt >= 1 && pageAsInt <= totalPages)
        {
            currentPage = page;
            await LoadPosts();
        }
    }

    private async Task LoadPosts()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            posts = await dbContext.Posts
                            .OrderByDescending(p => p.RegistrationDate)
                            .Skip((int.Parse(currentPage) - 1) * itemsPerPage)
                            .Take(itemsPerPage)
                            .ToListAsync();
        }
        StateHasChanged();
    }

    private async Task UpdateTotalCount()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var totalItems = await dbContext.Posts.CountAsync();
            totalPages = (totalItems + itemsPerPage - 1) / itemsPerPage;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        markdownPipeline = new MarkdownPipelineBuilder()
                                .UseAdvancedExtensions()
                                .UseCustomMarkdownExtension()
                                .Build();

        await UpdateTotalCount();
        await LoadPosts();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        EventService.OnPostUpdated += UpdatePosts;
        EventService.OnPostDeleted += DeletePost;
    }

    private async void UpdatePosts()
    {
        await InvokeAsync(async () =>
        {
            await UpdateTotalCount();
            await LoadPosts();
        });
    }

    private async void DeletePost()
    {
        await InvokeAsync(async () =>
        {
            using (var dbContext = dbContextFactory.CreateDbContext())
            {
                Post? postDelete = await dbContext.Posts.FirstOrDefaultAsync(p => p.Id == idPostDelete);
                if (postDelete != null)
                {
                    dbContext.Posts.Remove(postDelete);
                    int result = await dbContext.SaveChangesAsync();
                    if (result > 0)
                    {
                        await UpdateTotalCount();
                        await LoadPosts();
                    }
                    else
                    {
                        await ShowModal("Error", "Se produjo un error al borrar el post, si persiste contacte con el administrador");
                    }
                    idPostDelete = 0;
                }
            }
        });
    }

    public void Dispose()
    {
        EventService.OnPostUpdated -= UpdatePosts;
        EventService.OnPostUpdated -= DeletePost;
    }

}

