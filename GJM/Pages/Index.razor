@page "/"
@using GJM.Data;
@using Markdig;
@using Microsoft.EntityFrameworkCore;
@using Helpers;
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

<PageTitle>Index</PageTitle>

<h1>Dados y Mepples!</h1>

@if(posts.Any() && markdownPipeline != null)
{

    <Pagination>
        <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
        @{
            for (var i = 1; i <= pageItems; i++)
            {
                var pageNumberAsString = i.ToString();
                <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <PaginationLink Page="@pageNumberAsString" Clicked="@(async (string page) => await SetActive(page))">
                        @pageNumberAsString
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>
    <CardDeck>
        <Row>
            @foreach(var post in posts)
            {
                <Column ColumnSize="ColumnSize.Is4.IsAuto">
                    <Card>
                        <CardImage Source="https://blazorise.com/img/gallery/2.jpg" Alt="Card image cap 3"></CardImage>
                        <CardBody>
                            <CardTitle Size="5">@post.Tittle</CardTitle>
                            <CardText>
                                @((MarkupString)Markdown.ToHtml(post.Content, markdownPipeline))
                            </CardText>
                            <Button Color="Color.Primary">Abrir Entrada</Button>
                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
    </CardDeck>
    <Pagination>
        <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
        @{
            for (var i = 1; i <= pageItems; i++)
            {
                var pageNumberAsString = i.ToString();
                <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <PaginationLink Page="@pageNumberAsString" Clicked="@(async (string page) => await SetActive(page))">
                        @pageNumberAsString
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>
}
else
{
  <p>Cargando...</p>   
}


@code {
    IList<Post> posts = new List<Post>();
    MarkdownPipeline? markdownPipeline;

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "1";
    private int pageItems = 5;

    private bool IsActive(string page) => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1 )
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems )
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
    }

    private async Task SetActive(string page)
    {
        currentPage = page;
        await LoadPosts();
    } 

    private async Task LoadPosts()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            posts = await dbContext.Posts
                            .Skip((int.Parse(currentPage) - 1) * pageItems)
                            .Take(6)
                            .ToListAsync();
        }
        StateHasChanged();

    }

    protected async override Task OnInitializedAsync()
    {
        markdownPipeline = new MarkdownPipelineBuilder()
                                .UseAdvancedExtensions()
                                .UseCustomMarkdownExtension()
                                .Build();

        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            pageItems = await dbContext.Posts.CountAsync();
            if (pageItems <= 6)
            {
                pageItems = 1;   
            }
        }
        await LoadPosts();
        StateHasChanged();
    }

}

