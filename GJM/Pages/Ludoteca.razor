@page "/ludoteca"
@using GJM.Data;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

<Heading Size="HeadingSize.Is3">Search Games</Heading>
<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <TextEdit @bind-Text="searchTerm" Placeholder="Buscar por nombre o categoria" />
        <Button Color="Color.Primary" Clicked="SearchGames">Search</Button>
    </Column>
</Row>

<CardDeck>
    <Row>
        @foreach (var game in games)
        {
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is6.OnTablet.Is4.OnDesktop.Is3">
                <Card>
                    <CardImage Source="@game.Image" Alt="@game.Name"></CardImage>
                    <CardBody>
                        <CardTitle Size="5">@game.Name</CardTitle>
                        <CardSubtitle>Categoria: @game.Category</CardSubtitle>
                        <CardText>@(game.IsRented ? "Alquilado" : "Disponible")</CardText>
                        <CardText>@(game.IsRented ? $"Fecha disponibilidad: {game.ReturnDate?.ToString("MM/dd/yyyy")}" : string.Empty)</CardText>
                    </CardBody>
                </Card>
            </Column>
        }
    </Row>
</CardDeck>

<Pagination>
    <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
        <PaginationLink>
            <span aria-hidden="true">«</span>
        </PaginationLink>
    </PaginationItem>
    @{
        for (var i = 1; i <= totalPages; i++)
        {
            var pageNumberAsString = i.ToString();
            <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                <PaginationLink Page="@pageNumberAsString" Clicked="@(async (string page) => await SetActivePage(page))">
                    @pageNumberAsString
                </PaginationLink>
            </PaginationItem>
        }
    }
    <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
        <PaginationLink>
            <span aria-hidden="true">»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

@code {
    private const string PREVIOUS = "Previous";
    private const string NEXT = "Next";
    private string searchTerm = string.Empty;
    private List<Game> games = new List<Game>();
    private int currentPage = 1;
    private int totalPages = 0;

    private async Task SearchGames()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var query = dbContext.Games
                .Where(g => g.Name.Contains(searchTerm) || g.Category.Contains(searchTerm))
                .Include(g => g.User);

            // Count total items for pagination
            var totalItems = await query.CountAsync();
            totalPages = (totalItems + 5 - 1) / 5; // 5 items per page, change as needed

            games = await query
                .Skip((currentPage - 1) * 5)
                .Take(5)
                .ToListAsync();
        }
    }

    private bool IsActive(string page) => currentPage == int.Parse(page);

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage == 1;
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage == totalPages;
        }
        return false;
    }

    private async void Previous()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await SearchGames();
        }
    }

    private async void Next()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await SearchGames();
        }
    }

    private async Task SetActivePage(string page)
    {
        currentPage = int.Parse(page);
        await SearchGames();
    }
}
