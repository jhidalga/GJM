@page "/printAndPlay"
@using GJM.Data;
@using GJM.Pages.PrintAndPlays;
@using GJM.Services;
@using Microsoft.EntityFrameworkCore;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory


<PageTitle>Print & Play</PageTitle>

<AuthorizeView>
    <Authorized>
<Container>
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is8.OnTablet.Is12.OnMobile">
            <Heading Size="HeadingSize.Is3">Buscar Prints & Play</Heading>
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is8.OnTablet.Is12.OnMobile">
            <TextEdit @bind-Text="searchTerm" Placeholder="Buscar por nombre" />
        </Column>
        <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is4.OnTablet.Is12.OnMobile">
            <Button Color="Color.Primary" Clicked="SearchGames">Buscar</Button>
        </Column>
    </Row>
</Container>


<Divider />

<CardDeck>
    <Row>
        @foreach (var game in games)
        {
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is6.OnTablet.Is4.OnDesktop.Is3">
                <Card>
                    <CardBody>
                        <CardTitle Size="5">@game.Name</CardTitle>
                        <CardSubtitle>Descripción: @game.Description</CardSubtitle>
                        <a href="@game.Url" target="_blank">Descarga el juego aquí</a>
                        <Divider />
                        <Button Color="Color.Secondary" Clicked="@(()=> ShowModalViewerPDF(game.Id))" class="flex-fill mr-2">Visualizar</Button>
                    </CardBody>
                </Card>
            </Column>
        }
    </Row>
</CardDeck>
        @if (games.Any())
        {
        <Pagination>
            <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
                <PaginationLink>
                    <span aria-hidden="true">«</span>
                </PaginationLink>
            </PaginationItem>
                @{
                    for (var i = 1; i <= totalPages; i++)
                    {
                        var pageNumberAsString = i.ToString();
                            <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                                <PaginationLink Page="@pageNumberAsString" Clicked="@(async (string page) => await SetActivePage(page))">
                                @pageNumberAsString
                                </PaginationLink>
                            </PaginationItem>
                    }
                }
            <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
                <PaginationLink>
                    <span aria-hidden="true">»</span>
                </PaginationLink>
            </PaginationItem>
        </Pagination>
        }
    </Authorized>
    <NotAuthorized>
        <Alert Color="Color.Info" Visible>
            <AlertMessage>Info: </AlertMessage>
            <AlertDescription>Lo sentimos pere debes estar registrado para poder acceder</AlertDescription>
        </Alert>
    </NotAuthorized>
</AuthorizeView>


@code {
    private const string PREVIOUS = "Previous";
    private const string NEXT = "Next";
    private string searchTerm = string.Empty;
    private int currentPage = 1;
    private int totalPages = 0;
    private List<Data.PrintAndPlay> games = new List<Data.PrintAndPlay>();

    [Inject] public IModalService ModalService { get; set; }
    [Inject] public EventService EventService { get; set; }

    private bool IsActive(string page) => currentPage == int.Parse(page);

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage == 1;
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage == totalPages;
        }
        return false;
    }

    private async void Previous()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await SearchGames();
        }
    }

    private async void Next()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await SearchGames();
        }
    }

    private async Task SetActivePage(string page)
    {
        currentPage = int.Parse(page);
        await SearchGames();
    }

    private async Task SearchGames()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var query = dbContext.PrintAndPlays
                .Where(g => g.Name.Contains(searchTerm));

            // Count total items for pagination
            var totalItems = await query.CountAsync();
            totalPages = (totalItems + 5 - 1) / 5; // 5 items per page, change as needed

            games = await query
                .Skip((currentPage - 1) * 5)
                .Take(5)
                .ToListAsync();
        }
    }

    private Task ShowModalViewerPDF(int idGame = 0)
    {
        return ModalService.Show<ModalViewerPrintAndPlay>(parameters =>
        {
            parameters.Add(x => x.IdPrintAndPlay, idGame);
        },
        new ModalInstanceOptions() { UseModalStructure = false, Size = ModalSize.Fullscreen, Closing = DeleteAllTempPdfFilesAsync });

    }

    private async Task DeleteAllTempPdfFilesAsync(ModalClosingEventArgs args)
    {
        // Obtener la ruta del directorio de archivos temporales
        string tempPath = Path.GetTempPath();

        // Obtener una lista de todos los archivos PDF en el directorio de archivos temporales
        string[] tempPdfFiles = Directory.GetFiles(tempPath, "*.pdf");

        // Recorrer todos los archivos PDF y borrarlos
        foreach (string tempPdfFile in tempPdfFiles)
        {
            try
            {
                File.Delete(tempPdfFile);
            }
            catch (Exception)
            {
            }
        }

        // No es necesario, pero se añade para cumplir con el requisito de que el método sea async
        await Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await SearchGames();
    }

}
